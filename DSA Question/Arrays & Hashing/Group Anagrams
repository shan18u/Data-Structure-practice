Leetcode Group Anagrams:

class Solution:
    def groupAnagrams(self, strs):
        # Step 1: Create an empty dictionary where the default value is an empty list
        result = collections.defaultdict(list)
        
        # Step 2: Iterate over each word in the input list
        for word in strs:
            # Step 3: Initialize a list to store the counts of characters in the current word
            assign_number = [0] * 26
            
            # Step 4: Iterate over each character in the current word
            for char in word:
               
               # Step 5: Calculate the index of the character in the list based on its ASCII value
                index = ord(char) - ord("a")
                
                # For example, the words "eat", "tea", and "ate" will all have the same index,
                # resulting in the same character count list:
                # (1, 0, 0, 0, 1, 0, ..., 0, 1): ['eat', 'tea', 'ate']
                # Similarly, the words "tan" and "nat" will have the same index and character count list:
                # (1, 0, 0, 1, 0, 0, ..., 0, 1): ['tan', 'nat']
                # The word "bat" will have a different index and character count list:
                # (0, 1, 0, 0, 0, 0, ..., 0, 0): ['bat']
                # Increment the count of the character in the list
                assign_number[index] += 1
            
            # Step 7: Convert the list of character counts into a tuple and use it as a key
            # Step 8: Add the current word to the list associated with the key in the dictionary
            result[tuple(assign_number)].append(word)
        
        # Step 9: Return the values of the dictionary, which represent the groups of anagrams
        return result.values()
